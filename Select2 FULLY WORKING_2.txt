//------------------			Select2 working example		-		might need reworking but it works		----------------

//submit form on selection 
https://stackoverflow.com/questions/39282566/submitting-select2-form-with-jquery-upon-single-select-dropdown
https://stackoverflow.com/questions/39619518/select2-submit-form-on-select
//this one worked for me to submit the form on selection 
$('#selectDropdonwID').change(function(){
    $('#formID').submit();
});


// 	Model
public class AircraftViewModel
{

	public int Id { get; set; }
	public string Manufacturer { get; set; }
	public string Model { get; set; }
	public string ProdYear { get; set; }
	public Country Country { get; set; }

	public List<Aircraft> ListOfAricraft { get; set; }

	//Select2
	[Display(Name = "Aircrafts")]
	public ICollection<Aircraft> Aircrafts { get; set; }

	[Required]
	[Display(Name = "Aircraft")]
	public string Aircraft { get; set; }
	
	public Aircraft DefaultValue { get; set; }
}

	
//		Controller

[HttpGet]
public ActionResult Index()
{
	var aircraftList = db.Aircraft.Select(s => s).ToList();
	AircraftViewModel viewModel = new AircraftViewModel
	{
		Aircrafts = aircraftList,
		ListOfAricraft = aircraftList,
		DefaultValue = aircraftList.Last()
	};
	return View(viewModel);
}

[HttpPost]
public ActionResult Testing(int aircraftId)
{
	var tst = aircraftId;

	return View(aircraftId);
}

[HttpPost]
public ActionResult Testing2(string aircraftData)
{
	var tst = aircraftData;

	return View(aircraftData);
}
		
		
//		View
@using (Html.BeginForm("Testing", "Aircraft", FormMethod.Post, new { @class = "select", id = "aircraftId" }))
{
	@Html.AntiForgeryToken()
<h2>Testing</h2>
	<hr />
	@Html.ValidationSummary("", new { @class = "text-danger" })
	<div class="form-group">
		@Html.LabelFor(m => m.Aircraft, new { @class = "col-md-2 control-label" })
		<div class="col-md-10">
			<select class="col-md-10" id="select" name="aircraftId" data-val="@Model.DefaultValue.Id">
				@foreach (var item in Model.Aircrafts)
				{
				<option value="@item.Id" title="@item.Manufacturer">@item.Country+@item.Model</option>
				}
			</select>
		</div>

		<div class="form-group">
			<div class="col-md-offset-2 col-md-10">
				<input type="submit" class="btn btn-default" value="Testing" />
			</div>
		</div>
	</div>
}



//		Script
//this selects the default value but it needs to come from the model
        $("#select").val("5").trigger("change"); 

$("#select").select2({
        matcher: matchCustom,
            placeholder: "Miroslaw",
        }).on('select2:select', function (e) {
            debugger;
            $('#aircraftId').submit();
        });
		
    @*.on('select2:select', function (e) {
        debugger;
        $('#aircraftId').submit();

            @*var data = e.params.data;
            console.log(data);
            debugger;

            $.ajax({
                url: '@Url.Action("Testing2", "Aircraft")',
                type: "POST",
                data: { aircraftData: data.id },
                success: function (data) {
                    // your code in success
                    alert("success");
                }
            });*@
            //});

	//This defo selects default value for populated from model, add data-val="Model.DefaultValue.Id" to <select>
	var data = $('#select').data("val");
	$('#select').val(data).trigger('change')

	@*var selected = [{ id: @Model.DefaultValue.Id }];
	$('#select').val(selected).trigger('change');*@
	//$('#select').val('default').select2();

	//$("#select").on('select2:select', function (e) {
	//    debugger;
	//    $('#aircraftId').submit();
	//    });

	
	
function matchCustom(params, data) {
	// If there are no search terms, return all of the data
	if ($.trim(params.term) === '') {
		return data;
	}

	// Do not display the item if there is no 'text' property
	if (typeof data.text === 'undefined') {
		return null;
	}
	
	//I THINK THIS WORKS TO IGNORE CASESENSITIVITY BUT YOU NEED TO TYPE IN LETTER BY LETTER
	params.term = params.term || '';
	if (data.text.toUpperCase().indexOf(params.term.toUpperCase()) == 0) {
		var modifiedData = $.extend({}, data, true);
		modifiedData.text += ' (matched)';
		debugger;
		// You can return modified objects from here
		// This includes matching the `children` how you want in nested data sets
		return modifiedData;
	}
	
	//this matches well but doesnt work with sensitivity
	// `params.term` should be the term that is used for searching
	// `data.text` is the text that is displayed for the data object
	if (data.text.indexOf(params.term) > -1) {
		var modifiedData = $.extend({}, data, true);
		modifiedData.text += ' (matched)';

		// You can return modified objects from here
		// This includes matching the `children` how you want in nested data sets
		return modifiedData;
	}

	// Return `null` if the term should not be displayed
	return null;
}


//========================				Those are tests using AJAX calls and POST 
<select class="form-control" id="ddlName" ></select>
<select class="form-control" id="ddlName2" multiple="multiple"></select>
<select class="form-control" id="ddlName3" multiple="multiple"></select>
		
		
<div class="col-md-10">
	<!-- Select2 official example -->
	<select class="form-control" id="basic-example-select"></select>
</div>



    // Select  2 TESTING
    var pageSize = 20;

    $('#ddlName').select2({
        allowClear: true,
        placeholder: "This still in testing",
        //minimumInputLength: 0,
        ajax: {
            url: "@Url.Action("GetAircraft", "Aircraft")",
            //type: "GET",
            dataType: 'json',
            width: 'style',
            //quietMillis: 50,
            delay: 250,
            data: function (param) {
                debugger;
                return param;
            },
            processResults: function (data) {
                //return {
                //    results: data.Results
                //};
                return {
                    // Select2 requires an id, so we need to map the results and add an ID
                    // You could instead include an id in the tsv you add to soulheart ;)
                    results: data.Results.map(function (item) {
                        //debugger;
                        return {
                            text: item.text,
                            id: item.id
                        };

                    }),
                    pagination: {
                        // If there are 10 matches, there's at least another page
                        more: data.Results.length === 10
                    }
                };
            },
            cache: true
        }
    }).on("change",
        function (e) {
            
            var selectMulti = $.map($("#ddlName option:selected"),
                function (el, i) {
                    //return $(el).text();
                    debugger;

                    //var theSelection = $(el).val();
                    //console.log(theSelection);
                    //debugger;

                    //var select2Value = $(el.target).val();
                    //$("ddlName").val(select2Value);

                    return $(el).val();
                });
            });


        //$('#ddlName2').val("").trigger("change");
        //this automatically selects default 
        //$("#select2").val("2").trigger("change"); 


        $('#ddlName2').select2({
            casesensitive: false,
            matcher: matchCustom,
        allowClear: true,
        placeholder: "Search for Aircraft 2",
        ajax: {
            url: "@Url.Action("FetchItems", "Aircraft")",
            //type: "GET",
            dataType: 'json',
            width: 'style',
            delay: 250,
            data: function (param) {
                return param;
            },
            processResults: function (data) {
                //return {
                //    results: data.map(function (item) {
                //        for (i = 0; i < item.length; i++) {
                //            var newOption = new Option(item[i].manufacturer, item[i].model, false, false);
                //            debugger;

                //            $('#ddlName2').append(newOption).trigger('change');
                //            debugger;
                //        }
                //        return { id: item.model, text: item.manufacturer };
                //    })
                //};

                return {
                    results: data.map(function (item) {
                        return {
                            text: item.manufacturer + " - " + item.model,
                            id: item.model
                        };
                    })
                };
            },
            cache: true
        }
    }) .on("change",
        function (e) {
            debugger;
            var selectMulti = $.map($("#ddlName option:selected"),
                function (el, i) {
                    //return $(el).text();
                    return $(el).val();
                });
            });

        var data = $('#ddlName2').data("val");
        debugger;
        $('#ddlName2').val(data).trigger('change')

    // trying to add optgroup to select2 programatically

    //.then(function (data) {
    //    debugger;

    //    var newOption = new Option(data.text, data.id, false, false);
    //    var option = new Option(data.full_name, data.id, true, true);
    //    $('#ddlName2').append(newOption).trigger('change');

    //    $('#ddlName2').trigger({
    //        type: 'select2:select',
    //        param: {
    //            data: data
    //        }
    //    })
    //    debugger; )}


        $('#ddlName3').select2({
            casesensitive: false,
            matcher: matchCustom,
        allowClear: true,
        placeholder: "Search for Aircraft 3",
        //minimumInputLength: 0,
        ajax: {
            url: "@Url.Action("FetchContracts", "Aircraft")",
            dataType: 'json',
            width: 'style',
            delay: 250,
            data: function (param) {
                return param;
            },
            processResults: function (data) {
                return {
                    results: data.map(function (item) {
                        return {
                            text: item.name + " - " + item.id,
                            id: item.id
                        };
                    })
                };
            },
            cache: true
        }
    }).on("change",
        function (e) {
            debugger;
            var selectMulti = $.map($("#ddlName option:selected"),
                function (el, i) {
                    //return $(el).text();
                    return $(el).val();
                });
        });
		
		
		  $('#basic-example-select').select2({
        allowClear: true,
        placeholder: "Choose a manufacturer",
        ajax: {
            url: "http://sh-example-simple.herokuapp.com",
            dataType: "json",
            width: 'style',
            delay: 250,
            data: function (params) {
                debugger;
                return {
                    q: params.term,
                    page: params.page,
                    per_page: 10
                };
            },
            processResults: function (data, page) {
                debugger;
                return {
                    // Select2 requires an id, so we need to map the results and add an ID
                    // You could instead include an id in the tsv you add to soulheart ;)
                    results: data.matches.map(function (item) {
                        return {
                            id: item.text,
                            text: item.text
                        };
                    }),
                    pagination: {
                        // If there are 10 matches, there's at least another page
                        more: data.matches.length === 10
                    }
                };
            },
            cache: true
        }
    });
	